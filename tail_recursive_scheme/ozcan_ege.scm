(define (lastelement list) (car (reverse list)))
(define (crop list) (cdr(reverse (cdr (reverse list)))))

(define (foo list)
  (cond ((<= (length list) 1) #t)
				((not(equal? (car list) (lastelement list))) #f)
        (else (foo (crop list)))))

(define x 5)
(define y 5)

(foo '())
(foo '(x))
(foo '("ege" "ege"))
(foo '((1 2) #f "a" 1 ((2 "b") 1 ) 3 ((2 "b") 1) 1 "a" #f (1 2)) ) 
(foo '(x y)) 
(foo '(x x) )
(foo '(1 2)) 
(foo  '( (1 (2 (3)))   (1 (2 (3))) )) 
(foo '((1 2) (2 1))) 
